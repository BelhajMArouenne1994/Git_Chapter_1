// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: recipient.sql

package db

import (
	"context"
	"database/sql"
)

const createRecipient = `-- name: CreateRecipient :one
INSERT INTO "recipient" (
  "ocdMasterId", "username", "role", "created_at"
) VALUES (
  $1, $2, $3, $4
)
RETURNING "ocdMasterId", username, role, created_at
`

type CreateRecipientParams struct {
	OcdMasterId string         `json:"ocdMasterId"`
	Username    sql.NullString `json:"username"`
	Role        sql.NullString `json:"role"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateRecipient(ctx context.Context, arg CreateRecipientParams) (Recipient, error) {
	row := q.queryRow(ctx, q.createRecipientStmt, createRecipient,
		arg.OcdMasterId,
		arg.Username,
		arg.Role,
		arg.CreatedAt,
	)
	var i Recipient
	err := row.Scan(
		&i.OcdMasterId,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRecipient = `-- name: DeleteRecipient :exec
DELETE FROM "recipient"
WHERE "ocdMasterId" = $1
`

func (q *Queries) DeleteRecipient(ctx context.Context, ocdmasterid string) error {
	_, err := q.exec(ctx, q.deleteRecipientStmt, deleteRecipient, ocdmasterid)
	return err
}

const getRecipient = `-- name: GetRecipient :one
SELECT "ocdMasterId", username, role, created_at FROM "recipient"
WHERE "ocdMasterId" = $1 LIMIT 1
`

func (q *Queries) GetRecipient(ctx context.Context, ocdmasterid string) (Recipient, error) {
	row := q.queryRow(ctx, q.getRecipientStmt, getRecipient, ocdmasterid)
	var i Recipient
	err := row.Scan(
		&i.OcdMasterId,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const listRecipients = `-- name: ListRecipients :many
SELECT "ocdMasterId", username, role, created_at FROM "recipient"
ORDER BY "username"
`

func (q *Queries) ListRecipients(ctx context.Context) ([]Recipient, error) {
	rows, err := q.query(ctx, q.listRecipientsStmt, listRecipients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipient
	for rows.Next() {
		var i Recipient
		if err := rows.Scan(
			&i.OcdMasterId,
			&i.Username,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipient = `-- name: UpdateRecipient :exec
UPDATE "recipient"
SET "username" = $2,
    role = $3,
    "created_at" = $4
WHERE "ocdMasterId" = $1
RETURNING "ocdMasterId", username, role, created_at
`

type UpdateRecipientParams struct {
	OcdMasterId string         `json:"ocdMasterId"`
	Username    sql.NullString `json:"username"`
	Role        sql.NullString `json:"role"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) UpdateRecipient(ctx context.Context, arg UpdateRecipientParams) error {
	_, err := q.exec(ctx, q.updateRecipientStmt, updateRecipient,
		arg.OcdMasterId,
		arg.Username,
		arg.Role,
		arg.CreatedAt,
	)
	return err
}
