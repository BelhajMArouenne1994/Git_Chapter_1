// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: salesHistory.sql

package db

import (
	"context"
	"time"
)

const createSalesHistory = `-- name: CreateSalesHistory :one
INSERT INTO "salesHistory" (
  "brand",
  "country",
  "ocdTicketId",
  "technicalCreationDate",
  "technicalLastUpdateDate",
  "source",
  "sourceName",
  "sourceChannel",
  "sourcePersonId",
  "sourceTicketNumber",
  "sourceStoreType",
  "sourceStatusOrder",
  "ocdContactMasterId",
  "ocdContactVersionId",
  "ocdStoreId"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
RETURNING brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
`

type CreateSalesHistoryParams struct {
	Brand                   string    `json:"brand"`
	Country                 string    `json:"country"`
	OcdTicketId             string    `json:"ocdTicketId"`
	TechnicalCreationDate   time.Time `json:"technicalCreationDate"`
	TechnicalLastUpdateDate time.Time `json:"technicalLastUpdateDate"`
	Source                  string    `json:"source"`
	SourceName              string    `json:"sourceName"`
	SourceChannel           string    `json:"sourceChannel"`
	SourcePersonId          string    `json:"sourcePersonId"`
	SourceTicketNumber      string    `json:"sourceTicketNumber"`
	SourceStoreType         string    `json:"sourceStoreType"`
	SourceStatusOrder       string    `json:"sourceStatusOrder"`
	OcdContactMasterId      string    `json:"ocdContactMasterId"`
	OcdContactVersionId     string    `json:"ocdContactVersionId"`
	OcdStoreId              string    `json:"ocdStoreId"`
}

func (q *Queries) CreateSalesHistory(ctx context.Context, arg CreateSalesHistoryParams) (SalesHistory, error) {
	row := q.queryRow(ctx, q.createSalesHistoryStmt, createSalesHistory,
		arg.Brand,
		arg.Country,
		arg.OcdTicketId,
		arg.TechnicalCreationDate,
		arg.TechnicalLastUpdateDate,
		arg.Source,
		arg.SourceName,
		arg.SourceChannel,
		arg.SourcePersonId,
		arg.SourceTicketNumber,
		arg.SourceStoreType,
		arg.SourceStatusOrder,
		arg.OcdContactMasterId,
		arg.OcdContactVersionId,
		arg.OcdStoreId,
	)
	var i SalesHistory
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdTicketId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.Source,
		&i.SourceName,
		&i.SourceChannel,
		&i.SourcePersonId,
		&i.SourceTicketNumber,
		&i.SourceStoreType,
		&i.SourceStatusOrder,
		&i.OcdContactMasterId,
		&i.OcdContactVersionId,
		&i.OcdStoreId,
	)
	return i, err
}

const deleteSalesHistory = `-- name: DeleteSalesHistory :exec
DELETE FROM "salesHistory"
WHERE "ocdTicketId" = $1
`

func (q *Queries) DeleteSalesHistory(ctx context.Context, ocdticketid string) error {
	_, err := q.exec(ctx, q.deleteSalesHistoryStmt, deleteSalesHistory, ocdticketid)
	return err
}

const findSalesHistoryByBrand = `-- name: FindSalesHistoryByBrand :many
SELECT brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
FROM "salesHistory"
WHERE "brand" = $1 AND "country" = $2
ORDER BY "technicalLastUpdateDate" DESC
LIMIT 10
`

type FindSalesHistoryByBrandParams struct {
	Brand   string `json:"brand"`
	Country string `json:"country"`
}

func (q *Queries) FindSalesHistoryByBrand(ctx context.Context, arg FindSalesHistoryByBrandParams) ([]SalesHistory, error) {
	rows, err := q.query(ctx, q.findSalesHistoryByBrandStmt, findSalesHistoryByBrand, arg.Brand, arg.Country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesHistory
	for rows.Next() {
		var i SalesHistory
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdTicketId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.Source,
			&i.SourceName,
			&i.SourceChannel,
			&i.SourcePersonId,
			&i.SourceTicketNumber,
			&i.SourceStoreType,
			&i.SourceStatusOrder,
			&i.OcdContactMasterId,
			&i.OcdContactVersionId,
			&i.OcdStoreId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSalesHistoryByCountry = `-- name: FindSalesHistoryByCountry :many
SELECT brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
FROM "salesHistory"
WHERE "country" = $1
ORDER BY "technicalLastUpdateDate" DESC
LIMIT 10
`

func (q *Queries) FindSalesHistoryByCountry(ctx context.Context, country string) ([]SalesHistory, error) {
	rows, err := q.query(ctx, q.findSalesHistoryByCountryStmt, findSalesHistoryByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesHistory
	for rows.Next() {
		var i SalesHistory
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdTicketId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.Source,
			&i.SourceName,
			&i.SourceChannel,
			&i.SourcePersonId,
			&i.SourceTicketNumber,
			&i.SourceStoreType,
			&i.SourceStatusOrder,
			&i.OcdContactMasterId,
			&i.OcdContactVersionId,
			&i.OcdStoreId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesHistoryById = `-- name: GetSalesHistoryById :one
SELECT brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
FROM "salesHistory"
WHERE "ocdTicketId" = $1
LIMIT 1
`

func (q *Queries) GetSalesHistoryById(ctx context.Context, ocdticketid string) (SalesHistory, error) {
	row := q.queryRow(ctx, q.getSalesHistoryByIdStmt, getSalesHistoryById, ocdticketid)
	var i SalesHistory
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdTicketId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.Source,
		&i.SourceName,
		&i.SourceChannel,
		&i.SourcePersonId,
		&i.SourceTicketNumber,
		&i.SourceStoreType,
		&i.SourceStatusOrder,
		&i.OcdContactMasterId,
		&i.OcdContactVersionId,
		&i.OcdStoreId,
	)
	return i, err
}

const listNewestSalesHistory = `-- name: ListNewestSalesHistory :many
SELECT brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
FROM "salesHistory"
ORDER BY "technicalLastUpdateDate" DESC
LIMIT 10
`

func (q *Queries) ListNewestSalesHistory(ctx context.Context) ([]SalesHistory, error) {
	rows, err := q.query(ctx, q.listNewestSalesHistoryStmt, listNewestSalesHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesHistory
	for rows.Next() {
		var i SalesHistory
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdTicketId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.Source,
			&i.SourceName,
			&i.SourceChannel,
			&i.SourcePersonId,
			&i.SourceTicketNumber,
			&i.SourceStoreType,
			&i.SourceStatusOrder,
			&i.OcdContactMasterId,
			&i.OcdContactVersionId,
			&i.OcdStoreId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSalesHistory = `-- name: UpdateSalesHistory :one
UPDATE "salesHistory"
SET
  "brand" = $1,
  "country" = $2,
  "technicalCreationDate" = $3,
  "technicalLastUpdateDate" = $4,
  "source" = $5,
  "sourceName" = $6,
  "sourceChannel" = $7,
  "sourcePersonId" = $8,
  "sourceTicketNumber" = $9,
  "sourceStoreType" = $10,
  "sourceStatusOrder" = $11,
  "ocdContactMasterId" = $12,
  "ocdContactVersionId" = $13,
  "ocdStoreId" = $14
WHERE "ocdTicketId" = $15
RETURNING brand, country, "ocdTicketId", "technicalCreationDate", "technicalLastUpdateDate", source, "sourceName", "sourceChannel", "sourcePersonId", "sourceTicketNumber", "sourceStoreType", "sourceStatusOrder", "ocdContactMasterId", "ocdContactVersionId", "ocdStoreId"
`

type UpdateSalesHistoryParams struct {
	Brand                   string    `json:"brand"`
	Country                 string    `json:"country"`
	TechnicalCreationDate   time.Time `json:"technicalCreationDate"`
	TechnicalLastUpdateDate time.Time `json:"technicalLastUpdateDate"`
	Source                  string    `json:"source"`
	SourceName              string    `json:"sourceName"`
	SourceChannel           string    `json:"sourceChannel"`
	SourcePersonId          string    `json:"sourcePersonId"`
	SourceTicketNumber      string    `json:"sourceTicketNumber"`
	SourceStoreType         string    `json:"sourceStoreType"`
	SourceStatusOrder       string    `json:"sourceStatusOrder"`
	OcdContactMasterId      string    `json:"ocdContactMasterId"`
	OcdContactVersionId     string    `json:"ocdContactVersionId"`
	OcdStoreId              string    `json:"ocdStoreId"`
	OcdTicketId             string    `json:"ocdTicketId"`
}

func (q *Queries) UpdateSalesHistory(ctx context.Context, arg UpdateSalesHistoryParams) (SalesHistory, error) {
	row := q.queryRow(ctx, q.updateSalesHistoryStmt, updateSalesHistory,
		arg.Brand,
		arg.Country,
		arg.TechnicalCreationDate,
		arg.TechnicalLastUpdateDate,
		arg.Source,
		arg.SourceName,
		arg.SourceChannel,
		arg.SourcePersonId,
		arg.SourceTicketNumber,
		arg.SourceStoreType,
		arg.SourceStatusOrder,
		arg.OcdContactMasterId,
		arg.OcdContactVersionId,
		arg.OcdStoreId,
		arg.OcdTicketId,
	)
	var i SalesHistory
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdTicketId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.Source,
		&i.SourceName,
		&i.SourceChannel,
		&i.SourcePersonId,
		&i.SourceTicketNumber,
		&i.SourceStoreType,
		&i.SourceStatusOrder,
		&i.OcdContactMasterId,
		&i.OcdContactVersionId,
		&i.OcdStoreId,
	)
	return i, err
}
