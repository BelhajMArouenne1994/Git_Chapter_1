// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: surveyUrl.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSurveyUrl = `-- name: CreateSurveyUrl :one
INSERT INTO "surveyUrl" (
  "brand",
  "country",
  "ocdB2cSurveyUrlId",
  "technicalCreationDate",
  "technicalLastUpdateDate",
  "sourceName",
  "sourceSurveyId",
  "surveyId",
  "scenario",
  "channel",
  "surveyLanguage",
  "ocdMasterId",
  "relatedObjectName",
  "relatedObjectId",
  "url"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
RETURNING brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
`

type CreateSurveyUrlParams struct {
	Brand                   string         `json:"brand"`
	Country                 string         `json:"country"`
	OcdB2cSurveyUrlId       string         `json:"ocdB2cSurveyUrlId"`
	TechnicalCreationDate   time.Time      `json:"technicalCreationDate"`
	TechnicalLastUpdateDate time.Time      `json:"technicalLastUpdateDate"`
	SourceName              string         `json:"sourceName"`
	SourceSurveyId          string         `json:"sourceSurveyId"`
	SurveyId                string         `json:"surveyId"`
	Scenario                string         `json:"scenario"`
	Channel                 string         `json:"channel"`
	SurveyLanguage          string         `json:"surveyLanguage"`
	OcdMasterId             sql.NullString `json:"ocdMasterId"`
	RelatedObjectName       sql.NullString `json:"relatedObjectName"`
	RelatedObjectId         sql.NullString `json:"relatedObjectId"`
	Url                     sql.NullString `json:"url"`
}

func (q *Queries) CreateSurveyUrl(ctx context.Context, arg CreateSurveyUrlParams) (SurveyUrl, error) {
	row := q.queryRow(ctx, q.createSurveyUrlStmt, createSurveyUrl,
		arg.Brand,
		arg.Country,
		arg.OcdB2cSurveyUrlId,
		arg.TechnicalCreationDate,
		arg.TechnicalLastUpdateDate,
		arg.SourceName,
		arg.SourceSurveyId,
		arg.SurveyId,
		arg.Scenario,
		arg.Channel,
		arg.SurveyLanguage,
		arg.OcdMasterId,
		arg.RelatedObjectName,
		arg.RelatedObjectId,
		arg.Url,
	)
	var i SurveyUrl
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdB2cSurveyUrlId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.SourceName,
		&i.SourceSurveyId,
		&i.SurveyId,
		&i.Scenario,
		&i.Channel,
		&i.SurveyLanguage,
		&i.OcdMasterId,
		&i.RelatedObjectName,
		&i.RelatedObjectId,
		&i.Url,
	)
	return i, err
}

const deleteSurveyUrl = `-- name: DeleteSurveyUrl :exec
DELETE FROM "surveyUrl"
WHERE "ocdB2cSurveyUrlId" = $1
`

func (q *Queries) DeleteSurveyUrl(ctx context.Context, ocdb2csurveyurlid string) error {
	_, err := q.exec(ctx, q.deleteSurveyUrlStmt, deleteSurveyUrl, ocdb2csurveyurlid)
	return err
}

const findSurveyUrlsByBrandAndCountry = `-- name: FindSurveyUrlsByBrandAndCountry :many
SELECT brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
FROM "surveyUrl"
WHERE "brand" = $1 AND "country" = $2
ORDER BY "technicalCreationDate" DESC
`

type FindSurveyUrlsByBrandAndCountryParams struct {
	Brand   string `json:"brand"`
	Country string `json:"country"`
}

func (q *Queries) FindSurveyUrlsByBrandAndCountry(ctx context.Context, arg FindSurveyUrlsByBrandAndCountryParams) ([]SurveyUrl, error) {
	rows, err := q.query(ctx, q.findSurveyUrlsByBrandAndCountryStmt, findSurveyUrlsByBrandAndCountry, arg.Brand, arg.Country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyUrl
	for rows.Next() {
		var i SurveyUrl
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdB2cSurveyUrlId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.SourceName,
			&i.SourceSurveyId,
			&i.SurveyId,
			&i.Scenario,
			&i.Channel,
			&i.SurveyLanguage,
			&i.OcdMasterId,
			&i.RelatedObjectName,
			&i.RelatedObjectId,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSurveyUrlById = `-- name: GetSurveyUrlById :one
SELECT brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
FROM "surveyUrl"
WHERE "ocdB2cSurveyUrlId" = $1 LIMIT 1
`

func (q *Queries) GetSurveyUrlById(ctx context.Context, ocdb2csurveyurlid string) (SurveyUrl, error) {
	row := q.queryRow(ctx, q.getSurveyUrlByIdStmt, getSurveyUrlById, ocdb2csurveyurlid)
	var i SurveyUrl
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdB2cSurveyUrlId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.SourceName,
		&i.SourceSurveyId,
		&i.SurveyId,
		&i.Scenario,
		&i.Channel,
		&i.SurveyLanguage,
		&i.OcdMasterId,
		&i.RelatedObjectName,
		&i.RelatedObjectId,
		&i.Url,
	)
	return i, err
}

const linkSurveyUrlToRecipient = `-- name: LinkSurveyUrlToRecipient :one
UPDATE "surveyUrl"
SET "ocdMasterId" = $1
WHERE "ocdB2cSurveyUrlId" = $2
RETURNING brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
`

type LinkSurveyUrlToRecipientParams struct {
	OcdMasterId       sql.NullString `json:"ocdMasterId"`
	OcdB2cSurveyUrlId string         `json:"ocdB2cSurveyUrlId"`
}

func (q *Queries) LinkSurveyUrlToRecipient(ctx context.Context, arg LinkSurveyUrlToRecipientParams) (SurveyUrl, error) {
	row := q.queryRow(ctx, q.linkSurveyUrlToRecipientStmt, linkSurveyUrlToRecipient, arg.OcdMasterId, arg.OcdB2cSurveyUrlId)
	var i SurveyUrl
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdB2cSurveyUrlId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.SourceName,
		&i.SourceSurveyId,
		&i.SurveyId,
		&i.Scenario,
		&i.Channel,
		&i.SurveyLanguage,
		&i.OcdMasterId,
		&i.RelatedObjectName,
		&i.RelatedObjectId,
		&i.Url,
	)
	return i, err
}

const listNewestSurveyUrls = `-- name: ListNewestSurveyUrls :many
SELECT brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
FROM "surveyUrl"
ORDER BY "technicalCreationDate" DESC
LIMIT 10
`

func (q *Queries) ListNewestSurveyUrls(ctx context.Context) ([]SurveyUrl, error) {
	rows, err := q.query(ctx, q.listNewestSurveyUrlsStmt, listNewestSurveyUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyUrl
	for rows.Next() {
		var i SurveyUrl
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdB2cSurveyUrlId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.SourceName,
			&i.SourceSurveyId,
			&i.SurveyId,
			&i.Scenario,
			&i.Channel,
			&i.SurveyLanguage,
			&i.OcdMasterId,
			&i.RelatedObjectName,
			&i.RelatedObjectId,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNewestSurveyUrlsByBrandAndCountry = `-- name: ListNewestSurveyUrlsByBrandAndCountry :many
SELECT brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
FROM "surveyUrl"
WHERE "brand" = $1 AND "country" = $2
ORDER BY "technicalCreationDate" DESC
LIMIT 10
`

type ListNewestSurveyUrlsByBrandAndCountryParams struct {
	Brand   string `json:"brand"`
	Country string `json:"country"`
}

func (q *Queries) ListNewestSurveyUrlsByBrandAndCountry(ctx context.Context, arg ListNewestSurveyUrlsByBrandAndCountryParams) ([]SurveyUrl, error) {
	rows, err := q.query(ctx, q.listNewestSurveyUrlsByBrandAndCountryStmt, listNewestSurveyUrlsByBrandAndCountry, arg.Brand, arg.Country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyUrl
	for rows.Next() {
		var i SurveyUrl
		if err := rows.Scan(
			&i.Brand,
			&i.Country,
			&i.OcdB2cSurveyUrlId,
			&i.TechnicalCreationDate,
			&i.TechnicalLastUpdateDate,
			&i.SourceName,
			&i.SourceSurveyId,
			&i.SurveyId,
			&i.Scenario,
			&i.Channel,
			&i.SurveyLanguage,
			&i.OcdMasterId,
			&i.RelatedObjectName,
			&i.RelatedObjectId,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSurveyUrl = `-- name: UpdateSurveyUrl :one
UPDATE "surveyUrl"
SET
  "brand" = $1,
  "country" = $2,
  "technicalCreationDate" = $3,
  "technicalLastUpdateDate" = $4,
  "sourceName" = $5,
  "sourceSurveyId" = $6,
  "surveyId" = $7,
  "scenario" = $8,
  "channel" = $9,
  "surveyLanguage" = $10,
  "relatedObjectName" = $11,
  "relatedObjectId" = $12,
  "url" = $13
WHERE "ocdB2cSurveyUrlId" = $14
RETURNING brand, country, "ocdB2cSurveyUrlId", "technicalCreationDate", "technicalLastUpdateDate", "sourceName", "sourceSurveyId", "surveyId", scenario, channel, "surveyLanguage", "ocdMasterId", "relatedObjectName", "relatedObjectId", url
`

type UpdateSurveyUrlParams struct {
	Brand                   string         `json:"brand"`
	Country                 string         `json:"country"`
	TechnicalCreationDate   time.Time      `json:"technicalCreationDate"`
	TechnicalLastUpdateDate time.Time      `json:"technicalLastUpdateDate"`
	SourceName              string         `json:"sourceName"`
	SourceSurveyId          string         `json:"sourceSurveyId"`
	SurveyId                string         `json:"surveyId"`
	Scenario                string         `json:"scenario"`
	Channel                 string         `json:"channel"`
	SurveyLanguage          string         `json:"surveyLanguage"`
	RelatedObjectName       sql.NullString `json:"relatedObjectName"`
	RelatedObjectId         sql.NullString `json:"relatedObjectId"`
	Url                     sql.NullString `json:"url"`
	OcdB2cSurveyUrlId       string         `json:"ocdB2cSurveyUrlId"`
}

func (q *Queries) UpdateSurveyUrl(ctx context.Context, arg UpdateSurveyUrlParams) (SurveyUrl, error) {
	row := q.queryRow(ctx, q.updateSurveyUrlStmt, updateSurveyUrl,
		arg.Brand,
		arg.Country,
		arg.TechnicalCreationDate,
		arg.TechnicalLastUpdateDate,
		arg.SourceName,
		arg.SourceSurveyId,
		arg.SurveyId,
		arg.Scenario,
		arg.Channel,
		arg.SurveyLanguage,
		arg.RelatedObjectName,
		arg.RelatedObjectId,
		arg.Url,
		arg.OcdB2cSurveyUrlId,
	)
	var i SurveyUrl
	err := row.Scan(
		&i.Brand,
		&i.Country,
		&i.OcdB2cSurveyUrlId,
		&i.TechnicalCreationDate,
		&i.TechnicalLastUpdateDate,
		&i.SourceName,
		&i.SourceSurveyId,
		&i.SurveyId,
		&i.Scenario,
		&i.Channel,
		&i.SurveyLanguage,
		&i.OcdMasterId,
		&i.RelatedObjectName,
		&i.RelatedObjectId,
		&i.Url,
	)
	return i, err
}
